#!/usr/bin/env python

import os
import urllib2
import subprocess
import json

OK = True
NOT_OK = False

URL_TXT = 'url.txt'
DATA_JSON = os.path.join('data', 'friends.json')

# try to locate the git command line tool, or raise ImportError
GIT = exec_cmd_out("which git").strip()
if GIT == '':
    # FIXME: better error
    raise ImportError()


def main():
    # get the contents of url.txt
    with open(URL_TXT, 'r') as f:
        url = f.read()

    # fetch the url
    json = urllib2.urlopen(url).read()

    # write json to data/friends.json
    with open(DATA_JSON, 'w') as f:
        f.write(json)

    # git diff -> send email if not empty
    code, data = git_diff()

    if code == OK:
        if data != '':
            print "EMAIL DIFF: %s" % data
    else:
        print "ERROR with diff: %s" % data

    # git add/commit
    message = "friendilainen: %s" % datetime.now().isoformat()
    code, data = commit_all(message)
    if code != OK:
        print "ERROR with commit: %s" % data


# helpers
def git_diff():
    cmd = "%s diff --porcelain %s" % (GIT, DATA_JSON)
    stdout,stderr = exec_cmd(cmd, self.repo_directory)
    if (stderr != ''):
        return NOT_OK,stderr
    return OK,stdout


def commit_all(self, message):
    cmd = "%s commit --all -m \"%s\"" % (GIT, message)
    stdout,stderr =  exec_cmd(cmd, self.repo_directory)
    if (stderr != ''):
        return NOT_OK,stderr
    return OK,stdout


def exec_cmd_out(cmd, cwd=None):
    stdout,stderr = exec_cmd(cmd, cwd)
    return stdout

def exec_cmd(cmd, cwd=None):
    pipe = subprocess.Popen(cmd, shell=True, cwd=cwd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    stdout,stderr = pipe.communicate()
    pipe.wait()
    return stdout,stderr


if __name__ == '__main__':
    main()
